const sql = require("mssql");
const dbConfig = require("../dbConfig");
const Joi = require("joi");

const validateCreateReply = async (req, res, next) => {
    const schema = Joi.object({
        replyAuthor: Joi.string().min(1).max(100).required(),
        replyText: Joi.string().min(1).max(8000).required(),
        replyTo: Joi.number().integer().required()
    });

    const validation = schema.validate(req.body, { abortEarly: false }); // Validate request body

    if (validation.error) {
        const errors = validation.error.details.map((error) => error.message);
        res.status(400).json({ message: "Validation error", errors });
        return; // Terminate middleware execution on validation error
    }

    const { replyTo } = req.body;

    try {
        const connection = await sql.connect(dbConfig);
        const request = connection.request();
        request.input("postId", replyTo);

        const result = await request.query(`SELECT COUNT(*) AS count FROM Post WHERE postId = @postId`);
        connection.close();

        if (result.recordset[0].count === 0) {
        return res.status(400).json({ message: "Validation error", errors: ["The post you are replying to does not exist."] });
        }

        next();
    } catch (error) {
        return res.status(500).json({ message: "Database error", error: error.message });
    }
};

const validateUpdateReply = (req, res, next) => {
    const schema = Joi.object({
      replyText: Joi.string().min(1).max(8000).required(),
    });
  
    const validation = schema.validate(req.body, { abortEarly: false }); // Validate request body
  
    if (validation.error) {
      const errors = validation.error.details.map((error) => error.message);
      res.status(400).json({ message: "Validation error", errors });
      return; // Terminate middleware execution on validation error
    }
  
    next(); // If validation passes, proceed to the next route handler
};

module.exports = {
    validateCreateReply,
    validateUpdateReply
};